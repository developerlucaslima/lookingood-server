// ----------- Config -----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------- Enums -----------
enum Gender {
  BOTH
  MALE
  FEMALE
}

enum Role {
  USER
  ESTABLISHMENT
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Status {
  WAITING_FOR_CONFIRMATION
  CONFIRMED
  CHECK_OUT
  NO_SHOW
}

// ----------- Models -----------
model User {
  id            String   @id @default(uuid())
  name          String
  serviceGender Gender   @default(BOTH)
  email         String   @unique
  passwordHash  String
  createdAt     DateTime @default(now())
  role          Role     @default(USER)

  Booking Booking[]

  @@map("users")
}

model Establishment {
  id           String   @id @default(uuid())
  name         String
  description  String?
  phone        String?
  imageUrl     String?
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  latitude     Decimal
  longitude    Decimal
  role         Role     @default(ESTABLISHMENT)

  service               Service[]
  Professional          Professional[]
  Booking               Booking[]
  EstablishmentSchedule EstablishmentSchedule[]

  @@map("establishments")
}

model EstablishmentSchedule {
  id             String  @id @default(uuid())
  startTime      String
  minutesWorking Int
  breakTime      String?
  minutesBreak   Int?
  weekDay        WeekDay

  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  establishmentId String

  @@map("establishmentSchedule")
}

model Professional {
  id       String  @id @default(uuid())
  name     String
  imageUrl String?

  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  establishmentId String

  Booking              Booking[]
  ProfessionalSchedule ProfessionalSchedule[]

  @@map("professionals")
}

model ProfessionalSchedule {
  id             String  @id @default(uuid())
  startTime      String
  minutesWorking Int
  breakTime      String?
  minutesBreak   Int?
  weekDay        WeekDay

  professional   Professional @relation(fields: [professionalId], references: [id])
  professionalId String

  @@map("professionalSchedule")
}

model Service {
  id                          String  @id @default(uuid())
  name                        String
  price                       Decimal @db.Decimal(10, 2)
  genderFor                   Gender
  description                 String?
  imageUrl                    String?
  durationMinutes             Int
  modificationDeadlineMinutes Int

  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  establishmentId String

  Booking Booking[]

  @@map("services")
}

model Booking {
  id        String   @id @default(uuid())
  status    Status   @default(WAITING_FOR_CONFIRMATION)
  startTime DateTime
  endTime   DateTime

  Professional    Professional  @relation(fields: [professionalId], references: [id])
  professionalId  String
  service         Service       @relation(fields: [serviceId], references: [id])
  serviceId       String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  establishment   Establishment @relation(fields: [establishmentId], references: [id])
  establishmentId String

  @@map("bookings")
}
